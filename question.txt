Create a folder - name - contractzy
https://sqliteonline.com/ ( mysql workbench if they have it ).
After every query is executed ask them to save the query in the folder created in step 1.
Create a new database called "dummy_db" and a table called "users" with columns: "id" (INT), "name" (VARCHAR), and "age" (INT). Insert two rows of dummy data into the "users" table. Create another table called "orders" with columns: "id" (INT), "user_id" (INT), and "product" (VARCHAR). Insert some dummy data into the "orders" table.


INSERT INTO users (id, name, age) VALUES
    (1, 'John', 25),
    (2, 'Jane', 31),
    (3, 'Shyam', 34),
    (4, 'RAM', 30),
    (5, 'Joe', 52);


INSERT INTO orders (id, user_id, product) VALUES (1, 1, 'Product A'), (2, 2, 'Product B'), (3, 1, 'Product C'),(3,3, 'Product D');


Updating Data: Update the age of the user with id=1 to 30.


Deleting Data: Delete all users with an age greater than 40 from the "users" table.
Data Filtering: Retrieve the names of users whose age is between 25 and 35.
Data Sorting: Display the names of users in alphabetical order.
Data Aggregation: Calculate the average age of all users.
Joining Tables: Write a query to retrieve the names of users who have placed orders.
Subqueries: Write a query to retrieve the names of users who have not placed any orders.
Grouping and Aggregation: Calculate the total number of orders placed by each user.
Advanced Joining: Write a query to retrieve the names of users who have placed more than 3 orders.
Adding Another Table: Create a table called "order_details" with columns: "id" (INT), "order_id" (INT), "product_name" (VARCHAR), and "price" (DECIMAL). Insert some dummy data into the "order_details" table.
Join Operations: Write a query to retrieve the names of users along with their order details.
Finding the Last 5 Orders: Retrieve the details of the 5 most recent orders, including the user's name and the order details.
Retrieving n+1 Orders using Joins: Given a specific order ID, write a query to retrieve the user's name, order details, and the next order's details based on the order ID.
NODE.js Questions üëç( any programming language can be used to generate the result. ).
Select any 2 questions and try to solve them.

Question 1: Maximum Subarray Sum Write a function that takes an array of integers as input and returns the maximum sum of a subarray within the array. The subarray must consist of consecutive elements from the original array.

const arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]; //input
console.log(maxSubarraySum(arr)); // Output: 6
Question 2: Longest Increasing Subsequence Write a function that takes an array of integers as input and returns the length of the longest increasing subsequence. A subsequence is a sequence that can be derived from the original array by removing some or no elements without changing the order of the remaining elements.
const nums = [10, 9, 2, 5, 3, 7, 101, 18]; console.log(longestIncreasingSubsequence(nums)); // Output: 4
Question 3: Word Break Problem Write a function that takes a string and a dictionary of words as input. The function should determine if the string can be segmented into a space-separated sequence of one or more dictionary words.
const s = "leetcode"; const wordDict = ["leet", "code"]; console.log(wordBreak(s, wordDict)); // Output: true
Question 4: Binary Tree Diameter Implement a function to find the diameter of a binary tree. The diameter of a binary tree is defined as the length of the longest path between any two nodes in the tree. The path may or may not pass through the root.
const root = new TreeNode(1); root.left = new TreeNode(2); root.right = new TreeNode(3); root.left.left = new TreeNode(4); root.left.right = new TreeNode(5); console.log(diameterOfBinaryTree(root)); // Output: 3
Question 5: N-Queens Problem Write a function that solves the N-Queens problem, where N is the size of the chessboard. The function should return all possible arrangements of N queens on an NxN chessboard, such that no two queens threaten each other.
const n = 4;
 console.log(solveNQueens(n)); // Output: [ [ '.Q..', '...Q', 'Q...', '..Q.' ], [ '..Q.', 'Q...', '...Q', '.Q..' ] ]






